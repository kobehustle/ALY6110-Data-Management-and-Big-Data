# -*- coding: utf-8 -*-
"""Nasdaq_Stock_Market

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ok2P_70cC8OvZlmqol5NjPBtYVCS4ArV

# New Section
"""

from google.colab import files

uploaded = files.upload()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import re
import plotly.express as px
import plotly.graph_objects as go

df = pd.read_csv("Nasdaq_1.csv")
df.head()

df.info()

# Check for missing values
print(df.isnull().sum())

# Convert the date column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Convert the date column to datetime format
df['Year'] = df['Date'].dt.year

# Check for duplicates
print(df.duplicated().sum())

df = df.drop(['Adj Close'],axis=1)

print(df.describe())

df_AAPL = df[df['Symbol'] == 'AAPL']

df_AAPL['Year'] = df_AAPL['Date'].dt.year

print(df_AAPL.describe())

# Line chart of closing stock price over time
plt.figure(figsize=(9, 5))
sns.lineplot(x='Year', y='Close', data=df_AAPL)
plt.title('Closing Stock Price of AAPL Over Time')
plt.xlabel('Year')
plt.ylabel('Closing Stock Price')
plt.show()

# Filter the data for the past year
start_date = pd.to_datetime('today') - pd.DateOffset(years=1)
filtered_data = df_AAPL[df_AAPL['Date'] >= start_date]



sns.lineplot(x='Date', y='Close', data=filtered_data)
plt.title('Closing Stock Price of AAPL in the years 2022-2023')
plt.xlabel('Year')
plt.ylabel('Closing Stock Price')
plt.show()

!pip install mplfinance

import mplfinance as mpf

filtered_data = df_AAPL[(df_AAPL['Date'] >= '2023-05-16') & (df_AAPL['Date'] <= '2023-06-16')]

# Prepare the data for the candlestick chart
ohlc = filtered_data[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']].set_index('Date')

# Create the candlestick chart
mpf.plot(ohlc, type='candle', volume=True, style='yahoo')

# Extract the weekday from the date
df_AAPL['Weekday'] = df_AAPL['Date'].dt.weekday

weekday_data = df_AAPL.groupby('Weekday').mean()['Volume']

# Create a pivot table for reshaping the data
heatmap_data = weekday_data.reset_index().pivot(index=None,columns='Weekday', values='Volume')

# Calculate the aspect ratio based on the number of weekdays
num_weekdays = heatmap_data.shape[1]
aspect_ratio = num_weekdays / heatmap_data.shape[0]

# Adjust the figure size to maintain proportional height and width
fig_width = 8
fig_height = fig_width * aspect_ratio
plt.figure(figsize=(fig_width, fig_height))

# Get the minimum and maximum values for color mapping
vmin = heatmap_data.values.min()
vmax = heatmap_data.values.max()

sns.heatmap(heatmap_data, cmap='YlGnBu', annot=True, fmt='.2f', cbar=True)

# Customize the plot
plt.title("Average Traded Volume by Weekday")
plt.xlabel("Weekday")
plt.ylabel("")

# Set the weekday labels with level numbers
weekday_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
plt.xticks(ticks=range(len(weekday_labels)), labels=weekday_labels)
plt.yticks([])  # Hide y-axis tick labels

# Display the plot
plt.show()

# Fit a linear regression line
coefficients = np.polyfit(df_AAPL['Close'], df_AAPL['Volume'], 1)
trendline = np.polyval(coefficients, df_AAPL['Close'])


# Create a line chart with trend line
plt.figure(figsize=(10, 6))
plt.plot(df_AAPL['Close'], df_AAPL['Volume'], 'b-', linewidth=2, label='Data')
plt.plot(df_AAPL['Close'], trendline, 'r--', linewidth=2, label='Trend Line')

# Customize the plot
plt.title('AAPL Stock Close Price vs. Volume')
plt.xlabel('Close Price')
plt.ylabel('Volume')

# Display the plot
plt.show()
import statsmodels.api as sm

# Perform seasonal decomposition on the closing price of Apple stock
decomposed_apple_close = sm.tsa.seasonal_decompose(df_AAPL["Close"], period=360)  # The frequency is annual

# Print the decomposed components
print('Decomposing closing price of Apple over time')
figure = decomposed_apple_close.plot()
plt.show()

companies = ['GOOGL', 'AAPL', 'META', 'AMZN', 'MSFT']

plt.figure(figsize=(10, 6))
for company in companies:
    company_df = df[df['Symbol']==company]
    sns.lineplot(x='Year', y='Close', data=company_df, label=company)
plt.title('Closing Stock Price of Multiple Companies Over Time')
plt.xlabel('Year')
plt.ylabel('Closing Stock Price')
plt.legend()
plt.show()

daily_returns = df_AAPL['Close'].pct_change()

# Create a line chart of the daily returns
plt.plot(daily_returns.index, daily_returns.values)
plt.title('AAPL Daily Returns')
plt.xlabel('Date')
plt.ylabel('Daily Return')
plt.show()
#This will create a line chart showing the daily returns over time.

from statsmodels.graphics.tsaplots import plot_acf

# Autocorrelation of Closing price of AAPL
plot_acf(df_AAPL["Close"],lags=25,title="Autocorrelation chart: AAPL (Close price)")
plt.show()

import plotly.graph_objects as go
from plotly.offline import iplot

df_GOOGL = df[df['Symbol'] == 'GOOGL']

filtered_data = df_GOOGL[(df_GOOGL['Date'] >= '2023-05-01') & (df_GOOGL['Date'] <= '2023-06-16')]

# AAPL chart
trace = go.Ohlc(x=filtered_data.Date,
                open=filtered_data.Open,
                high=filtered_data.High,
                low=filtered_data.Low,
                close=filtered_data.Close)
data = [trace]
# Set the chart title and x-axis format
layout = go.Layout(title='OHLC Price Chart of GOOGL May 2023 - June 2023')

# Create the figure
fig = go.Figure(data=data, layout=layout)

# Display the OHLC chart
print('OHLC price chart of GOOGL May 2023 - June 2023')
iplot(fig, filename='simple_ohlc')

# Calculate the moving average
window_size = 10
df_AAPL['Moving Average'] = df_AAPL['Close'].rolling(window=window_size).mean()

# Plot the original data and the moving average
plt.plot(df_AAPL['Date'], df_AAPL['Close'], label='Original Data')
plt.plot(df_AAPL['Date'], df_AAPL['Moving Average'], label=f'Moving Average ({window_size} periods)')
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Trend Analysis')
plt.legend()
plt.show()

### create a blank dataframe
close=pd.DataFrame()

close['apple'] = df_AAPL['Close'].reset_index(drop=True)
close['google'] = df_GOOGL['Close'].reset_index(drop=True)

df_AMZN = df[df['Symbol'] == 'AMZN']
close['amazon'] = df_AMZN['Close'].reset_index(drop=True)

df_MSFT = df[df['Symbol'] == 'MSFT']
close['microsoft'] = df_MSFT['Close'].reset_index(drop=True)

df_META = df[df['Symbol'] == 'META']
close['meta'] = df_META['Close'].reset_index(drop=True)

close.head()
sns.pairplot(data=close)
sns.heatmap(close.corr(),annot=True,cmap='gray_r',linecolor="black")

companies = ['AAPL', 'GOOGL', 'AMZN', 'MSFT']
filtered_data = df[df['Symbol'].isin(companies)]

plt.figure(figsize=(15, 10))
for i, company in enumerate(companies, 1):
    plt.subplot(2, 2, i)
    df_temp = df[df['Symbol'] == company]
    plt.plot(df_temp['Date'], df_temp['Volume'])
    plt.title(company)

plt.tight_layout()
plt.show()
